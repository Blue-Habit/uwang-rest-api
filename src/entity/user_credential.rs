//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.3

use super::sea_orm_active_enums::AuthProvider;
use super::sea_orm_active_enums::UserGender;
use super::sea_orm_active_enums::UserStatus;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "user_credential")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    #[sea_orm(unique)]
    pub email: String,
    pub password: String,
    pub username: String,
    pub full_name: String,
    pub date_of_birth: Option<Date>,
    pub gender: Option<UserGender>,
    pub status: UserStatus,
    pub auth_provider: AuthProvider,
    pub created_at: DateTime,
    pub updated_at: DateTime,
    pub deleted: bool,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::admin::Entity")]
    Admin,
    #[sea_orm(has_many = "super::admin_role::Entity")]
    AdminRole,
    #[sea_orm(has_many = "super::post::Entity")]
    Post,
    #[sea_orm(has_many = "super::user_log::Entity")]
    UserLog,
    #[sea_orm(has_many = "super::user_profile::Entity")]
    UserProfile,
}

impl Related<super::admin::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Admin.def()
    }
}

impl Related<super::admin_role::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AdminRole.def()
    }
}

impl Related<super::post::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Post.def()
    }
}

impl Related<super::user_log::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserLog.def()
    }
}

impl Related<super::user_profile::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserProfile.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
